define({"0":{y:0,u:"../Content/A-Introduction-Topics/Introduction.htm",l:-1,t:"Introduction",i:0.018648531937584,a:"The following documentation describes the principles of operation and provides an example implementation of two serial communication protocols:  the open standard Serial Communication Lib and the Modbus RTU protocol.  Serial communication is a method of transmitting data between devices using a ..."},"1":{y:0,u:"../Content/A-Introduction-Topics/Intended-audience.htm",l:-1,t:" Intended Audience",i:0.018648531937584,a:" Intended Audience This documentation is intended for building automation system integrators utilizing Beckhoff devices. Specifically, it is targeted towards automation programmers whose task is to establish communication between typical building automation devices such as pumps, meters, and ..."},"2":{y:0,u:"../Content/A-Introduction-Topics/TwinCAT3-preparation.htm",l:-1,t:"TwinCAT 3 Software Preparation",i:0.018648531937584,a:"TwinCAT 3 Software Preparation This chapter describes the necessary preparatory steps required to initiate communication using the communication protocols described in this documentation.  TwinCAT 3 Project Creation  Adding Libraries"},"3":{y:0,u:"../Content/A-Introduction-Topics/TwinCAT3-proj-creation.htm",l:-1,t:" TwinCAT 3 Project Creation",i:0.0465273623005051,a:" TwinCAT 3 Project Creation To create a TwinCAT 3 project: From the top menu, select the option File→New→Project. Creating a new TwinCAT project In the dialog box that appears, choose TwinCAT XAE Project template (1), set the project name and path (2), and press OK (3). Choosing TwinCAT XAE template ..."},"4":{y:0,u:"../Content/A-Introduction-Topics/Adding-Libs.htm",l:-1,t:" Adding Libraries",i:0.0465273623005051,a:" Adding Libraries The communication protocols described in the documentation utilize different libraries. To add any library to the project: Right-click on References catalog and choose Add library... Adding library step 1 In the dialog box that appears, find on the list the library you want to use  ..."},"5":{y:0,u:"../Content/B-SerialCom-Topics/Serial-Communication.htm",l:-1,t:"Serial Communication",i:0.018648531937584,a:"Serial Communication General Description Requirements Preparation Background Communication Data Exchange – The Role Of The Main And The Secondary Device Good Practices"},"6":{y:0,u:"../Content/B-SerialCom-Topics/SerialCom_description.htm",l:-1,t:"General Description",i:0.0212904072803751,a:"The three commonly used physical layers of serial communication are RS232, RS422, and RS485. Each of them can run any application layer protocol. The most used communication protocol in serial communication is Modbus RTU. However, it is possible to come across devices that do not support this ..."},"7":{y:0,u:"../Content/B-SerialCom-Topics/SerialComm_requirements.htm",l:-1,t:"Requirements",i:0.0212904072803751,a:"To reproduce the communication example described in the documentation, the following are necessary: A computer with TwinCAT 3 software installed, version 3.1.4024.7 or higher. Installed TF6340 Serial Communication library. Basic knowledge of PLC programming and basic familiarity with the TwinCAT 3 ..."},"8":{y:0,u:"../Content/B-SerialCom-Topics/SerialCom_Prep.htm",l:-1,t:"Preparation",i:0.0212904072803751,a:"Preparation Wiring Project Preparation Devices Configuration - COM Port Devices Configuration - EL6022 Transmission Parameters"},"9":{y:0,u:"../Content/B-SerialCom-Topics/SerialComm-wiring.htm",l:-1,t:"Wiring",i:0.0222679011519015,a:"You can use SerialCom library  for different types of communication, and therefore it is not possible to indicate one type of connection. Wire the equipment according to the application. Serial port pin description: Serial port pins For the RS485 mode, pin 2 and 3 (Data+) as well as pin7 and 8 ..."},"10":{y:0,u:"../Content/B-SerialCom-Topics/SerialComm-projprep.htm",l:-1,t:"Project Preparation",i:0.0222679011519015,a:"Project Preparation In the TwinCAT 3 environment: Add new TwinCAT Project with PLC project, as described in   TwinCAT 3 Project Creation Add Tc2_SerialCom library, as described in   Adding Libraries"},"11":{y:0,u:"../Content/B-SerialCom-Topics/SerialComm-dev-config.htm",l:-1,t:"Devices Configuration - COM Port",i:0.0432465935558995,a:"To manually configure the built-in COM port, follow the steps below: Right-click on the Devices node and choose Add New Item... (1). In the dialog box that appears, choose Serial Communication Port (2) and click OK (3). Adding a com-port to a project Set the  Transmission Parameters  in the ..."},"12":{y:0,u:"../Content/B-SerialCom-Topics/EL6022-dev-config1.htm",l:-1,t:"Devices Configuration - EL6022",i:0.0222679011519015,a:"Scan the EL6022 terminal automatically  during the search for devices on the E-Bus: Right-click on the Devices node and choose Scan. Automatic scan of devices step 1 In the dialog box that appears, select EtherCAT option. Automatic scan of devices step 2   Set  Transmission Parameters  in CoE-Online ..."},"13":{y:0,u:"../Content/B-SerialCom-Topics/Transmission-parameters.htm",l:-1,t:"Transmission Parameters",i:0.0779552219132686,a:"You can freely configure the transmission parameters depending on the needs, but they must be the same on both the main and the secondary device side. Transmission parameters are: Baudrate - the speed at which data bits are sent. Data bits - the number of bits of data in each frame. Stop bits - the ..."},"14":{y:0,u:"../Content/B-SerialCom-Topics/Background-communication.htm",l:-1,t:"Background Communication",i:0.0212904072803751,a:"The basic element of an application that uses the SerialCom library is the SerialLineControl function block. This block is used to transmit data from the PLC program to the physical buffer of the COM port. Thanks to this approach, the data transmission and reception blocks are the same, regardless ..."},"15":{y:0,u:"../Content/B-SerialCom-Topics/Data-exchange.htm",l:-1,t:"Data Exchange – The Role Of The Main And The Secondary Device",i:0.0212904072803751,a:"The template application implements a request-response type of communication. The Main device sends a request and waits for a response. The response is analyzed, and the process starts over. The secondary device waits for a request, and when it receives one, it begins analyzing and sends an ..."},"16":{y:0,u:"../Content/B-SerialCom-Topics/SerialComm-Main.htm",l:-1,t:"Main Device Example Program Implementation",i:0.0276969549733777,a:"The individual steps for the main side consist of: Copy Main device steps CASE iState OF 0: Waiting for a signal to send a command. When received, the read variable InData is cleared, and its value is inserted into the sending variable OutData. 10: Sending the frame – the SendData block is called at ..."},"17":{y:0,u:"../Content/B-SerialCom-Topics/SerialComm-Secondary.htm",l:-1,t:"Secondary Device Example Program Implementation",i:0.0276969549733777,a:"The individual steps for the secondary side consist of: Copy Secondary device steps  CASE iState OF 0: Listening - waiting for data. When received, it is written to the InData variable, output data is cleared, and it proceeds to step 10. If the operation fails, it jumps to step 10000. 10: Decoding ..."},"18":{y:0,u:"../Content/B-SerialCom-Topics/Good-practices.htm",l:-1,t:"Good Practices",i:0.0212904072803751,a:"Good Practices In the case of modules operating in 22-byte mode, it may be necessary to call the SerialLineControl block in a faster task than the standard 10 ms to avoid buffer overflow issue. Buffer Overflow Example Avoiding Buffer Overflow"},"19":{y:0,u:"../Content/B-SerialCom-Topics/Buffer-overflow.htm",l:-1,t:"Buffer Overflow Example",i:0.0276969549733777,a:"Communication principle with standard cycle time (10 ms): The PLC (Programmable Logic Controller) task set on the controller is 10 ms. The communication terminal has an internal read buffer of 1024 bytes and a write buffer of 128 bytes. Secondary devices send a one-time frame consisting of 220 bytes ..."},"20":{y:0,u:"../Content/B-SerialCom-Topics/Avoiding-Buffer-overflow.htm",l:-1,t:"Avoiding Buffer Overflow",i:0.0457938010449651,a:"It is impossible to increase the buffer inside the terminal, nor to increase the amount of data transmitted between the module and the PLC program. You can only change the frequency of executing the PLC program, i.e., the task. If the task is set to 1 ms, the time to read data from the buffer will ..."},"21":{y:0,u:"../Content/C-Modbus-Topics/Modbus RTU.htm",l:-1,t:"Modbus RTU",i:0.018648531937584,a:"Modbus RTU General Description Requirements Preparation Application On The Main Device Side Application On The Secondary Device Side Good Practices"},"22":{y:0,u:"../Content/C-Modbus-Topics/Modbus_general-desc.htm",l:-1,t:"General Description",i:0.0212904072803751,a:"Modbus RTU is an open, main-secondary communication protocol. It allows for bidirectional data exchange in serial networks such as RS232/485/422. In a network, there can only be one main device that polls the secondary devices. However, the number of secondary devices that can be connected is ..."},"23":{y:0,u:"../Content/C-Modbus-Topics/Modbus_require.htm",l:-1,t:"Requirements",i:0.0212904072803751,a:"To initiate the communication using the Modbus RTU protocol, you need to meet the following requirements: TwinCAT software version 3.1.4024.x or higher. Any Beckhoff computer with a built-in serial port. EL6022 communication terminal designed for serial communication via the E-Bus interface.  ..."},"24":{y:0,u:"../Content/C-Modbus-Topics/Modbus-prep.htm",l:-1,t:"Preparation",i:0.0212904072803751,a:"Preparation Wiring Project Preparation Devices Configuration"},"25":{y:0,u:"../Content/C-Modbus-Topics/Modbus-wiring.htm",l:-1,t:"Wiring",i:0.0246808139614464,a:"Wiring Device connection diagram and plug pinout:  Modbus RTU connection diagram"},"26":{y:0,u:"../Content/C-Modbus-Topics/Modbus-proj-prep.htm",l:-1,t:"Project Preparation",i:0.0246808139614464,a:"Project Preparation In the TwinCAT 3 environment:        Add new TwinCAT Project with PLC project, as described in   TwinCAT 3 Project Creation Add Tc2_ModbusRTU library as described in   Adding Libraries"},"27":{y:0,u:"../Content/C-Modbus-Topics/Modbus-dev-config.htm",l:-1,t:"Devices Configuration",i:0.0246808139614464,a:"Devices Configuration The device configuration is similar to the SerialCom library, and a description of how to do this you can find in  Devices Configuration - COM Port"},"28":{y:0,u:"../Content/C-Modbus-Topics/Modbus-Main-App.htm",l:-1,t:"Application On The Main Device Side",i:0.0212904072803751,a:"Depending on whether the application will be implemented using the built-in COM port or the EL terminal, you should declare the appropriate function block in the application. ModbusRtuMaster_PcCom – for built-in COM port. ModbusRtuMaster_KL6x22B – for EL6022 terminal. Sample declaration of Main ..."},"29":{y:0,u:"../Content/C-Modbus-Topics/Modbus-Secondary-App1.htm",l:-1,t:"Application On The Secondary Device Side",i:0.0212904072803751,a:"The ModbusRTUSlave_xxx function block allows for the creation of a secondary device by specifying variables indicating input, output, and memory areas. At the same time, only one Modbus secondary device can exist on a single RS-bus output. You must call ModbusRTUSlave_xxx function block  in each ..."},"30":{y:0,u:"../Content/C-Modbus-Topics/Modbus-Good-practices.htm",l:-1,t:"Good Practices",i:0.0212904072803751,a:"Good Practices The communication technologies of RS422 and RS485 operate using voltage levels on a 2-wire line. To avoid signal distortion and excessive voltage drop you should use terminating resistors at the receiver accordingly. Line Termination"},"31":{y:0,u:"../Content/C-Modbus-Topics/Line-termination.htm",l:-1,t:"Line Termination",i:0.0367453780091714,a:"In the case of RS422/RS485 line, you should use termination resistors with the value of 120 Ω.  Too many resistors combined with the line resistance (regardless of the permissible cable length) can cause excessive voltage drop across the transmission link. You should design the connection system in ..."},"32":{y:0,u:"../Content/D-Reference/Company.htm",l:-1,t:"Company",i:0.018648531937584,a:"Company Patrycja Jasińska Warszawska Warszawa 123 456 789 jasinska.pat@gmail.com"},"33":{y:0,u:"../Content/E-End_topics/Tables-list.htm",l:-1,t:"List Of Tables",i:0.018648531937584,a:"List Of Tables"},"34":{y:0,u:"../Content/D-Reference/Tips.htm",l:-1,t:"Tips",i:0.018648531937584,a:"Lorem ipsum dolor rit amet, consectettr adipiscing elit. Eusce blandit sapidn a dolor accumsan `ccumsan. Nullam nepue velit, ornare vek orci vel, mollis frhngilla mauris. Dondc sagittis elemensum arcu, at gravida puam mollis id. Suspdndisse lectus augte, auctor in aliqual nec, fringilla id dnlor. ..."},"35":{y:0,u:"../Content/E-End_topics/Bibliography.htm",l:-1,t:"Bibliography",i:0.018648531937584,a:"Bibliography Beckhoff Infosys Fernhill Software Article Elmark Automatyka Article Elektronika24 Article"},"36":{y:0,u:"../Content/D-Reference/MyToc.htm",l:-1,t:"Table Of Contents",i:0.018648531937584,a:"Table Of Contents"},"37":{y:0,u:"../Content/D-Reference/FAQs.htm",l:-1,t:"FAQs",i:0.018648531937584,a:"Lorem ipsum dolor rit amet, consectettr adipiscing elit. Eusce blandit sapidn a dolor accumsan `ccumsan. Nullam nepue velit, ornare vek orci vel, mollis frhngilla mauris. Dondc sagittis elemensum arcu, at gravida puam mollis id. Suspdndisse lectus augte, auctor in aliqual nec, fringilla id dnlor. ..."},"38":{y:0,u:"../Content/E-End_topics/Images-list.htm",l:-1,t:"List Of Figures",i:0.018648531937584,a:"List Of Figures"},});